#!/bin/sh

set -e

COMMAND=$1
BINS=./bin
K8S=k8s
CONTROL=control

VERSION=$(date +%y%m%d%H%M%S)

GCLOUD_PROJECT_ID=$($BINS/config gcloud get-project-id)
CLUSTER_ID=$($BINS/config gcloud get-cluster-id)

if [ -z "$GCLOUD_PROJECT_ID" ]; then
    echo "GCLOUD_PROJECT_ID is not set"
    exit 1
fi

echo "Run against $GCLOUD_PROJECT_ID on cluster $CLUSTER_ID"

function prepare {
    NODE=$1
    FILE=$(echo "$K8S/node-\${node_type}.rc.yml" | $BINS/config -n $NODE template)
    echo "Deploy kubes $NODE from $FILE"

    cat $FILE \
        | $BINS/config -n $NODE template \
        | kubectl create -f -
}

function build {
    NAME=$1
    ORG=etherkube
    echo "Build docker container for: $ORG/$NAME from ./containers/$NAME"

    docker build -t $ORG/$NAME ./containers/$NAME
}

function push_docker {
    NAME=$1
    ORG=etherkube

    docker tag $ORG/$NAME gcr.io/$GCLOUD_PROJECT_ID/$NAME:latest
    gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$NAME:latest
    docker tag $ORG/$NAME gcr.io/$GCLOUD_PROJECT_ID/$NAME:$VERSION
    gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$NAME:$VERSION
}

function deploy {
    NODE=$1
    DOCKER_TYPE=$(echo "\${node_type}-\${node_source}" | $BINS/config -n $NODE template)

    build $DOCKER_TYPE
    push_docker $DOCKER_TYPE
    prepare $NODE
}

function cluster {
    gcloud config set container/cluster $CLUSTER_ID
    gcloud container clusters get-credentials $CLUSTER_ID
}

function control-deploy {
    NODE=$1
    ORG=etherkube
    case "$NODE" in
        nginx)
            docker build -t gcr.io/$GCLOUD_PROJECT_ID/nginx:latest ./containers/nginx
            gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/nginx:latest
            FILE = $(echo "$K8S/$CONTROL/nginx.rc.yml")
            cat $FILE \
                | $BINS/config -n $NODE template \
                | kubectl create -f -
        ;;
    esac
    echo "Pod $NODE has been deployed."
}

function control-start-service {
    NODE=$1
    case "$NODE" in
        nginx)
            FILE = $(echo "$K8S/$CONTROL/nginx.srv.yml")
            cat $FILE \
                | $BINS/config -n $NODE template \
                | kubectl create -f -
        ;;
    esac
    echo "Service $NODE has been started."
}

function control-stop-service {
    NODE=$1
    kubectl delete service $NODE
    echo "Service $NODE has been stopped."
}

function control-proxy {
    SERVICE=$1
    kubectl proxy
    echo "Open your browser and go to : http://localhost:8001/api/v1/proxy/namespaces/default/services/$NODE"
}

case "$COMMAND" in
    build)
        build $2
        ;;
    deploy)
        deploy $2
        kubectl get pods -o wide
        ;;
    init)
        cluster
        ;;
    control)
        CONTROLCMD=$2
        case "$CONTROLCMD" in
            deploy)
                control-deploy $3
                kubectl get pods -o wide
            ;;
            start-service)
                control-start-service $3
            ;;
            stop-service)
                control-stop-service $3
            ;;
            proxy)
                control-proxy $3
            ;;
            help)
                echo Usage
                echo ""
                echo "./bin/etherkube control deploy nginx"
            ;;
        esac
        ;;
    help)
        echo Usage
        echo ""
        echo "etherkube deploy <node-type>"
        echo etherkube deploy geth-provided
        ;;
esac