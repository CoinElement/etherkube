#!/bin/sh

set -e

COMMAND=$1
BINS=./bin
K8S=k8s
CONTROL=control

VERSION=$(date +%y%m%d%H%M%S)

GCLOUD_PROJECT_ID=$($BINS/config gcloud get-project-id)
CLUSTER_ID=$($BINS/config gcloud get-cluster-id)
ZONE_ID=$($BINS/config gcloud get-zone-id)

if [ -z "$GCLOUD_PROJECT_ID" ]; then
    echo "GCLOUD_PROJECT_ID is not set"
    exit 1
fi

echo "Run against $GCLOUD_PROJECT_ID on cluster $CLUSTER_ID"

function prepare {
    NODE=$1

    DISK=$(echo "\${id}-disk" | $BINS/config -n $NODE template)
    echo "Create disk $DISK for $NODE"
    GDISK=$(gcloud compute disks create $DISK --type pd-ssd --size 50GB || echo "disk exists")
    FILE=$(echo "$K8S/node.rc.yml" | $BINS/config -n $NODE template)
    echo "Deploy kubes $NODE from $FILE"
    cat $FILE \
        | $BINS/config -n $NODE template \
        | kubectl create -f - || echo "node: $1 exists"
    FILE=$(echo "$K8S/node.svc.yml" | $BINS/config -n $NODE template || echo "service for $1 exists")
    cat $FILE \
        | $BINS/config -n $NODE template \
        | kubectl create -f - || echo "service for $1 exists"
    PGSVC=$(kubectl get svc -o name | grep "service/pg")

    if [ -z "$PGSVC" ]; then
        echo "deploying pg service"
        kubectl apply -f "$K8S/pg.svc.yml" || echo "service pg exists"
    fi
}

function build {
    NAME=$1
    ORG=etherkube
    echo "Build docker container for: $ORG/$NAME from ./containers/$NAME"

    docker build -t $ORG/$NAME ./containers/$NAME
}

function push_docker {
    NAME=$1
    ORG=etherkube

    docker tag $ORG/$NAME gcr.io/$GCLOUD_PROJECT_ID/$NAME:latest
    gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$NAME:latest
    docker tag $ORG/$NAME gcr.io/$GCLOUD_PROJECT_ID/$NAME:$VERSION
    gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$NAME:$VERSION
}

function deploy {
    NODE=$1
    # DOCKER_TYPE=$(echo "\${node_type}-\${node_source}" | $BINS/config -n $NODE template)

    # build $DOCKER_TYPE
    # push_docker $DOCKER_TYPE
    # build $1
    # push_docker $1
    prepare $NODE
}

function restart {
    NODE=$1

    FILE=$(echo "$K8S/node.rc.yml" | $BINS/config -n $NODE template)
    SVC_ID=$(echo "node-\${id}-svc" | $BINS/config -n $NODE template)
    RC_ID=$(echo "node-\${id}" | $BINS/config -n $NODE template)

    echo "Delete service $SVC_ID and controller $RC_ID"
    kubectl delete svc $SVC_ID
    kubectl delete rc $RC_ID

    echo "Deploy kubes $NODE from $FILE"
    cat $FILE \
        | $BINS/config -n $NODE template \
        | kubectl create -f -
    FILE=$(echo "$K8S/node.svc.yml" | $BINS/config -n $NODE template)
    cat $FILE \
        | $BINS/config -n $NODE template \
        | kubectl create -f -

}

function stop {
    NODE=$1

    SVC_ID=$(echo "node-\${id}-svc" | $BINS/config -n $NODE template)
    RC_ID=$(echo "node-\${id}" | $BINS/config -n $NODE template)
    echo "Delete service $SVC_ID and controller $RC_ID"
    kubectl delete rc $RC_ID | echo ""
    kubectl delete svc $SVC_ID | echo ""
    kubectl delete svc pg | echo ""

    echo "Wait for RC deletion..."
    sleep 30

    DISK=$(echo "\${id}-disk" | $BINS/config -n $NODE template)
    echo "Delete disk $DISK for $NODE"
    gcloud compute disks delete $DISK
}

function cluster {
    gcloud config set project $GCLOUD_PROJECT_ID
    gcloud config set compute/zone $ZONE_ID
    gcloud config set container/cluster $CLUSTER_ID
    gcloud container clusters get-credentials $CLUSTER_ID
}

function control_deploy {
    APP=$1
    ORG=etherkube
    docker build -t gcr.io/$GCLOUD_PROJECT_ID/$APP:latest ./containers/$APP
    gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$APP:latest
    FILE=$(echo "$K8S/control/$APP.rc.yml")
    cat $FILE \
        | $BINS/config -n $APP template \
        | kubectl create -f -
    echo "Pod $APP has been deployed."
}

function control_start_service {
    APP=$1
    FILE=$(echo "$K8S/control/$APP.srv.yml")
    cat $FILE \
        | $BINS/config -n $APP template \
        | kubectl create -f -
    echo "Service $APP has been started."
}

function control_stop_service {
    NODE=$1
    kubectl delete service $NODE
    echo "Service $NODE has been stopped."
}

function control_proxy {
    SERVICE=$1
    kubectl proxy --www='dashboard-ui/build' --www-prefix='/dashboard/'
    echo "Open your browser and go to : http://localhost:8001/api/v1/proxy/namespaces/default/services/$NODE"
}



function block_explorer_deploy {
    APP=$1
    ORG=etherkube
    if [ $APP == "shyft-block-frontend" ]; then
        echo "compiling frontend with nginx"
        docker build -t gcr.io/$GCLOUD_PROJECT_ID/$APP:latest ./containers/$APP
        # gcloud docker -- push gcr.io/$GCLOUD_PROJECT_ID/$APP:latest
        docker push gcr.io/$GCLOUD_PROJECT_ID/$APP:latest
    fi

    FILE=$(echo "$K8S/block-explorer/$APP.rc.yml")
    cat $FILE \
        | $BINS/config -n $APP template \
        | kubectl create -f -
    echo "Pod $APP has been deployed."
}

function block_explorer_start_service {
    APP=$1
    FILE=$(echo "$K8S/block-explorer/$APP.svc.yml")
    cat $FILE \
        | $BINS/config -n $APP template \
        | kubectl create -f -
    echo "Service $APP has been started."
}

function block_explorer_start {
    echo "creating shyft-block-api"
    block_explorer_deploy shyft-block-api
    block_explorer_start_service shyft-block-api

    echo "creating shyft-block-ui"
    block_explorer_deploy shyft-block-ui
    block_explorer_start_service shyft-block-ui

    echo "creating shyft-block-frontend"
    block_explorer_deploy shyft-block-frontend
    block_explorer_start_service shyft-block-frontend
}

function block_explorer_stop {

    echo "Deleting service for sershyft-block-frontend, shyft-block-ui and shyft-block-api"

    kubectl delete service service-block-explorer
    kubectl delete service shyft-block-ui-svc
    kubectl delete service shyft-block-api-svc
    echo "Deleting service done."

    echo "Deleting pods for shyft-block-frontend, shyft-block-ui and shyft-block-api"
    kubectl delete rc shyft-block-frontend | echo ""
    kubectl delete rc shyft-block-ui | echo ""
    kubectl delete rc shyft-block-api | echo ""
    echo "Deleting pods done."

}

function block_explorer_stop_service {
    NODE=$1
    kubectl delete service $NODE
    echo "Service $NODE has been stopped."
}

case "$COMMAND" in
    build)
        build $2
        ;;
    deploy)
        deploy $2
        kubectl get pods -o wide
        echo "Wait for pod $2 spawning..."
        sleep 10
        block_explorer_start

        kubectl get all
        kubectl get svc -o wide
        ;;
    stop)
        stop $2
        block_explorer_stop
        kubectl get pods -o wide
        kubectl get svc -o wide
        ;;
    restart)
        restart $2
        kubectl get rc -o wide
        kubectl get pods -o wide
        kubectl get svc -o wide
        ;;
    init)
        cluster
        ;;
    control)
        CONTROLCMD=$2
        case "$CONTROLCMD" in
            deploy)
                control_deploy $3
                kubectl get pods -o wide
            ;;
            start-service)
                control_start_service $3
                kubectl get svc -o wide
            ;;
            stop-service)
                control_stop_service $3
                kubectl get svc -o wide
            ;;
            proxy)
                control_proxy $3
            ;;
            help)
                echo Usage
                echo ""
                echo "./bin/etherkube control deploy nginx"
            ;;
        esac
        ;;
    block-explorer)
        CONTROLCMD=$2
        case "$CONTROLCMD" in
            start)
                block_explorer_start
                # block_explorer_deploy $3
                # kubectl get pods -o wide
                # block_explorer_start_service $3
                # kubectl get svc -o wide
            ;;
            stop)
                block_explorer_stop
            ;;
            help)
                echo Usage
                echo ""
                echo "./bin/etherkube block-explorer start"
            ;;
        esac
        ;;
    shyftnet)
        CONTROLCMD=$2
        case "$CONTROLCMD" in
            deploy)
                deploy $3
                kubectl get pods -o wide
            ;;
            stop)
                stop $3
                kubectl get pods -o wide
                kubectl get svc -o wide
            ;;
            help)
                echo Usage
                echo ""
                echo "./bin/etherkube block-explorer deploy shyft-block-api"
            ;;
        esac
        ;;
    help)
        echo Usage
        echo ""
        echo "etherkube deploy <node-type>"
        echo etherkube deploy geth-provided
        ;;
esac